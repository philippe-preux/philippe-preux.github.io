sommeil <- read.csv ("http://www.grappa.univ-lille3.fr/~ppreux/ensg/ed/R/sommeil.csv")
names(sommeil)
with(sommeil)
?WITH
?with
cor (sommeil$Body.Weight, sommeil$Body.Weight)
cor (sommeil$Brain.Weight, sommeil$Body.Weight)
cor(sommeil)
covar(sommeil)
?cor
?var
cov2cor (sommeil)
?cov2cor
cov (sommeil, sommeil)
head(sommeil)
cov (sommeil [,2:11],sommeil [,2:11])
cor (sommeil [,2:11],sommeil [,2:11])
?cor
cor (sommeil [,2:11],sommeil [,2:11], use = "pairwise.complete.obs")
plot (sommeil$Brain.Weight, sommeil$Body.Weight)
plot (sommeil$Brain.Weight, sommeil$Body.Weight, xlim = c (0,800), ylim = c (0, 800))
plot (sommeil$Brain.Weight, sommeil$Body.Weight, xlim = c (0,200), ylim = c (0, 200))
plot (sommeil$Brain.Weight / sommeil$Body.Weight)
q("yes")
names(sommeil)
subset (sommeil, Predation=1)
subset (sommeil, Predation=2)
?subset (sommeil, Predation=2)
?subset (sommeil, select = "Predation=2")
subset (sommeil, select = "Predation=2")
?subset (sommeil, select = "Predation=2")
subset (sommeil, Predation==2)
?table
table(sommeil$Predation)
?stack
?table
?cov2cor
cov2cor(sommeil)
?cov2cor
cor(sommeil)
names(sommeil)
?cor
cor(sommeil[,-1], use="pairwise.complete.obs")
?cor
?cor
cor(sommeil[,-1], use="pairwise.complete.obs", method="kendall")
hist (sommeil$Body.Weight)
hist (sommeil$Body.Weight[sommeil$Body.Weight<1000])
hist (sommeil$Body.Weight[sommeil$Body.Weight<100])
hist (sommeil$Body.Weight[sommeil$Body.Weight<10])
hist (sommeil$Body.Weight[sommeil$Body.Weight<1])
names(sommeil)
sommeil [, sommeil$Predation == 2]
sommeil$Predation == 2
sommeil [sommeil$Predation == 2, ]
sommeil [sommeil$Predation == 2, ]
sommeil [(sommeil$Predation == 2) & (sommeil$Endangered <= 3), ]
sommeil [sommeil$Predation == 2, ]
sommeil [(sommeil$Predation == 2) & (sommeil$Endangered >= 3), ]
sommeil [(sommeil$Predation == 2) & (sommeil$Endangered >= 2), ]
sommeil [sommeil$Predation == 2, ]
sommeil [(sommeil$Predation == 2) & (sommeil$Brain.Weight <= 3), ]
sommeil [(sommeil$Predation == 2) , ]
sommeil [(sommeil$Predation == 2) & (sommeil$Brain.Weight <= 3), ]
sommeil$Species [(sommeil$Predation == 2) & (sommeil$Brain.Weight <= 3), ]
sommeil [(sommeil$Predation == 2) & (sommeil$Brain.Weight <= 3), ]
sommeil$Species [(sommeil$Predation == 2) & (sommeil$Brain.Weight <= 3)]
as.character (sommeil$Species [(sommeil$Predation == 2) & (sommeil$Brain.Weight <= 3)])
sommeil [sommeil$Predation == 2, ]
sommeil [seq (from = 2, by = 2), c (2, 7)]
sommeil [seq (from = 2, to = nrow (sommeil), by = 2), c (2, 7)]
sommeil [seq (from = 2, to = nrow (sommeil), by = 2), c (2, 7)]sommeil [seq (from = 2, to = nrow (sommeil), by = 2), c (2, 7)]
sommeil [seq (from = 2, to = nrow (sommeil), by = 2), c (2, 7)]
sommeil [, c (2, 3, 7)]
sommeil [c (3, 5, 7, 18), ]
sommeil$Species [is.na (sommeil$Non.Dreaming)]
sommeil$Species [(sommeil$Predation == 2) | (sommeil$Brain.Weight <= 3)]
sommeil [(sommeil$Predation == 2) | (sommeil$Brain.Weight <= 3), 1]
sommeil [(sommeil$Predation == 2) & (sommeil$Brain.Weight <= 3), 1]
which (sommeil [(sommeil$Predation == 2) | (sommeil$Brain.Weight <= 3), ])
 which ((sommeil$Predation == 2) | (sommeil$Brain.Weight <= 3))
which ((sommeil$Predation == 2) | (sommeil$Brain.Weight <= 3))
v <- which ((sommeil$Predation == 2) | (sommeil$Brain.Weight <= 3))
sommeil$Species [v]
cor (log (sommeil$Dreaming), sommeil$Endangered)
?cor
cor (log (sommeil$Dreaming), sommeil$Endangered, use = "pairwise.complete.obs")
log (sommeil$Dreaming)
ok.species <- ! is.na (sommeil$Dreaming)
cor (log (sommeil$Dreaming[ok.species]), sommeil$Endangered[ok.species], use = "pairwise.complete.obs")
log (sommeil$Dreaming[ok.species])
sommeil$Endangered[ok.species]
(sommeil$Dreaming[ok.species])
ok.species <- (! is.na (sommeil$Dreaming)) & (sommeil$Dreaming > 0)
cor (log (sommeil$Dreaming[ok.species]), sommeil$Endangered[ok.species], use = "pairwise.complete.obs")
?lm
sommeil$Species <- as.character(sommeil$Species)
head(sommeil)
cor(sommeil$Dreaming, sommeil$Non.Dreaming, use="pairwise.complete.obs")
cor(sommeil$Dreaming, sommeil$Lifespan, use="pairwise.complete.obs")
cor(sommeil$Non.Dreaming, sommeil$Lifespan, use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation==5], sommeil$Lifespan, use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation==5], sommeil$Lifespan[sommeil$Predation==5], use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation>4], sommeil$Lifespan[sommeil$Predation>4], use="pairwise.complete.obs")
hist(sommeil$Predation)
cor(sommeil$Dreaming[sommeil$Predation>=4], sommeil$Lifespan[sommeil$Predation>=4], use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation>=3], sommeil$Lifespan[sommeil$Predation>=3], use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation>=5], sommeil$Lifespan[sommeil$Predation>=5], use="pairwise.complete.obs")
names(sommeil)
cor(sommeil$Dreaming[sommeil$Predation>=4], sommeil$Sleep.exposure[sommeil$Predation>=5], use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation>=4], sommeil$Sleep.exposure[sommeil$Predation>=4], use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation>=5], sommeil$Sleep.exposure[sommeil$Predation>=5], use="pairwise.complete.obs")
cor(sommeil$Dreaming[sommeil$Predation>=5], sommeil$Endangered[sommeil$Predation>=5], use="pairwise.complete.obs")
cor(sommeil$Predation[sommeil$Predation>=5], sommeil$Sleep.exposure[sommeil$Predation>=5], use="pairwise.complete.obs")
cor(sommeil$Predation[sommeil$Predation>=4], sommeil$Sleep.exposure[sommeil$Predation>=4], use="pairwise.complete.obs")
sommeil$Sleep.exposure[sommeil$Predation>=5]
sommeil$Predation[sommeil$Predation>=5]
cor(sommeil$Predation[sommeil$Predation<=2], sommeil$Sleep.exposure[sommeil$Predation>=4], use="pairwise.complete.obs")
cor(sommeil$Predation[sommeil$Predation<=2], sommeil$Sleep.exposure[sommeil$Predation<=2], use="pairwise.complete.obs")
cor(sommeil$Predation[sommeil$Predation<=1], sommeil$Sleep.exposure[sommeil$Predation<=1], use="pairwise.complete.obs")
sommeil$Sleep.exposure[sommeil$Predation<=1]
sans.na <- which ((!is.na (sommeil$Predation)) & (! is.na (sommeil$Dreaming)))
plot (sommeil$Predation [sans.na], sommeil$Dreaming [sans.na])
abline (sommeil$Predation [sans.na], sommeil$Dreaming [sans.na], col ="red")
?abline
abline (lsfit (sommeil$Predation [sans.na], sommeil$Dreaming [sans.na]), col ="red")
plot (sommeil$Predation [sans.na], sommeil$Dreaming [sans.na])
abline (lsfit (sommeil$Predation [sans.na], sommeil$Dreaming [sans.na]), col ="red")
lsfit (sommeil$Predation [sans.na], sommeil$Dreaming [sans.na])
?abline
?lm
lm (Predation ~ Dreaming, data = sommeil [sans.na])
?lm
lm (Predation ~ Dreaming, data = sommeil, subset = sans.na)
abline (lm(Predation ~ Dreaming, data = sommeil, subset = sans.na), col = "blue")
cor(sommeil$Predation[sommeil$Predation<=1], sommeil$Sleep.exposure[sommeil$Predation<=1], use="pairwise.complete.obs")
cor(sommeil$Predation, sommeil$Sleep.exposure, use="pairwise.complete.obs")
sommeil$Sleep.exposure
cor(sommeil$Dreaming, sommeil$Brain.Weight, use="pairwise.complete.obs")
cor(sommeil$Dreaming, sommeil$Body.Weight, use="pairwise.complete.obs")
cor(sommeil$Non.Dreaming, sommeil$Body.Weight, use="pairwise.complete.obs")
cor(sommeil$Non.Dreaming, sommeil$Brain.Weight, use="pairwise.complete.obs")
cor(sommeil$Lifespan, sommeil$Body.Weight, use="pairwise.complete.obs")
cor(sommeil$Lifespan, sommeil$Brain.Weight, use="pairwise.complete.obs")
cor(sommeil[,-1])
cor(sommeil[,-1], use="pairwise.complete.obs")
which (cor(sommeil[,-1], use="pairwise.complete.obs") > .8)
?cor
?upper.tri
sommeil.cm <- cor(sommeil[,-1], use="pairwise.complete.obs")
sommeil.cm [upper.tri (sommeil.cm)]
?upper.tri
sommeil.cm [lower.tri (sommeil.cm)] <- NA
sommeil.cm 
which (sommeil.cm  > .8)
diag (sommeil.cm) <- NA
which (sommeil.cm  > .8)
sommeil.cm
which (sommeil.cm  > .8)
nchar ("hello world!")
?nchar
deparse(mean)
nchar (deparse(mean))
mean
sommeil$lg.nom.espece <- nchar (sommeil$Species)
sommeil$lg.nom.espece 
cor(sommeil[,-1], use="pairwise.complete.obs")
cor(sommeil[,-1], use="pairwise.complete.obs")[,11]
cor(sommeil[,-1], use="pairwise.complete.obs")[11,]
cor(log (sommeil$Gestation), log (sommeil$Dreaming) use="pairwise.complete.obs")[11,]
cor (log (sommeil$Gestation), log (sommeil$Dreaming), use = "pairwise.complete.obs")
titi <- (sommeil$Gestation > 0) & (sommeil$Dreaming > 0)
cor (log (sommeil$Gestation [titi]), log (sommeil$Dreaming [titi], use = "pairwise.complete.obs")
)
cor (log (sommeil$Gestation [titi]), log (sommeil$Dreaming [titi]), use = "pairwise.complete.obs")
cor ( (sommeil$Gestation [titi]), log (sommeil$Dreaming [titi]), 
     use = "pairwise.complete.obs")
cor (log (sommeil$Gestation [titi]),  (sommeil$Dreaming [titi]), 
     use = "pairwise.complete.obs")
sommeil$Endangered
titi2 <- which (sommeil$Dreaming > 0)
cor (sommeil$Dreaming [titi2], sommeil$Endangered, use = "pairwise.complete.obs")
cor (log (sommeil$Dreaming [titi2]), sommeil$Endangered, use = "pairwise.complete.obs")
cor (sommeil$Dreaming [titi2], log (sommeil$Endangered), use = "pairwise.complete.obs")
cor (log (sommeil$Dreaming [titi2]), log (sommeil$Endangered), use = "pairwise.complete.obs")
titi2 <- which (sommeil$Dreaming > 0)
cor (sommeil$Dreaming [titi2], sommeil$Endangered [titi2], use = "pairwise.complete.obs")
cor (log (sommeil$Dreaming [titi2]), sommeil$Endangered [titi2], use = "pairwise.complete.obs")
cor (sommeil$Dreaming [titi2], log (sommeil$Endangered [titi2]), use = "pairwise.complete.obs")
cor (log (sommeil$Dreaming [titi2]), log (sommeil$Endangered [titi2]), use = "pairwise.complete.obs")
titi3 <- (sommeil$Body.Weight > 0) & (sommeil$Lifespan > 0)
cor (log (sommeil$Body.Weight [titi3]), log (sommeil$Lifespan [titi3]), 
     use = "pairwise.complete.obs")
cor (sommeil$Body.Weight [titi3], sommeil$Lifespan [titi3], 
     use = "pairwise.complete.obs")
cor (log (sommeil$Body.Weight [titi3]),  (sommeil$Lifespan [titi3]), 
     use = "pairwise.complete.obs")
cor ( (sommeil$Body.Weight [titi3]), log (sommeil$Lifespan [titi3]), 
     use = "pairwise.complete.obs")
?log
?table
pwd()
q("y")
q("yes")
ls()
length(which(sommeil$Body.Weight>1000))
sommeil$Body.Weight>1000
sommeil [sommeil$Body.Weight>1000,]
sommeil [sommeil$Body.Weight>1,]
sommeil [sommeil$Body.Weight>100,]
sommeil$Body.Weight/sommeil$Brain.Weight
sommeil$Body.Weight/sommeil$Brain.Weight/1000
which (sommeil$Body.Weight/sommeil$Brain.Weight/1000>0.02)
which (sommeil$Body.Weight/sommeil$Brain.Weight/1000>0.01)
which (sommeil$Body.Weight/sommeil$Brain.Weight/1000>0.001)
length(which(sommeil$Body.Weight>100))
sommeil$Species[which(sommeil$Body.Weight>100)]
sommeil$Species (sommeil$Body.Weight/sommeil$Brain.Weight/1000>0.001)
sommeil$Species [which(sommeil$Body.Weight/sommeil$Brain.Weight/1000>0.001)]
which(sommeil$Dreaming+sommeil$Non.Dreaming>10)
which(sommeil$Dreaming + sommeil$Non.Dreaming > 10)
which(sommeil$Dreaming+sommeil$Non.Dreaming>10)
which(sommeil$Dreaming+sommeil$Non.Dreaming>12)
sommeil$Spécies [which (sommeil$Dreaming+sommeil$Non.Dreaming>12)]
sommeil$Species [which (sommeil$Dreaming+sommeil$Non.Dreaming>12)]
sommeil$Endangered [which (sommeil$Dreaming+sommeil$Non.Dreaming>12)]
sommeil$Predation [which (sommeil$Dreaming+sommeil$Non.Dreaming>12)]
sommeil$Sleep.exposure [which (sommeil$Dreaming+sommeil$Non.Dreaming>12)]
sommeil$Body.Weight [which (sommeil$Dreaming+sommeil$Non.Dreaming>12)]
sommeil$Body.Weight [which (sommeil$Dreaming+sommeil$Non.Dreaming<1)]
sommeil$Body.Weight [which (sommeil$Dreaming+sommeil$Non.Dreaming<2)]
sommeil$Body.Weight [which (sommeil$Dreaming+sommeil$Non.Dreaming<10)]
sommeil[1,]
sommeil [which (sommeil$Dreaming+sommeil$Non.Dreaming<10), c ("Species", "Body.Weight")]
sommeil$Lifespan [which (sommeil$Dreaming+sommeil$Non.Dreaming>=12)]
sommeil$Lifespan [which (sommeil$Dreaming+sommeil$Non.Dreaming>12)]
sommeil$Species [which (sommeil$Lifespan<1)]
sommeil$Species [which (sommeil$Lifespan<2)]
min (sommeil$Lifespan)
min (sommeil$Lifespan, na.rm = T)
max (sommeil$Lifespan, na.rm = T)
sdmax (sommeil$Lifespan, na.rm = T)
sd (sommeil$Lifespan, na.rm = T)
median (sommeil$Lifespan, na.rm = T)
mean (sommeil$Lifespan, na.rm = T)
hist (sommeil$Lifespan, na.rm = T)
hist (sommeil$Lifespan)
nchar ("hello world!")
table(sommeil$Predation)
table(sommeil$Endangered)
table(sommeil$Sleep.exposure)
table(sommeil$Sleep)
names(osmmeil)
names(osmmeil)
names(sommeil)
 which(sommeil$Sleep>12)
which (sommeil$Dreaming+sommeil$Non.Dreaming>12)
which (sommeil$Sleep != sommeil$Dreaming+sommeil$Non.Dreaming)
 (sommeil$Sleep - sommeil$Dreaming+sommeil$Non.Dreaming)
 (sommeil$Sleep - (sommeil$Dreaming+sommeil$Non.Dreaming))
sommeil$Sleep
sommeil$Dreaming
sommeil$non.Dreaming
sommeil$Non.Dreaming
which(sommeil$Sleep>12)
sommeil$Species [which (sommeil$Sleep>12)]
sommeil$Sleep.exposure [which (sommeil$Sleep>12)]
q("yes")
plot (sommeil$Sleep)
png("Sleep.png")
plot (sommeil$Sleep)
dev.off()
plot (sommeil$Sleep, col = "blue", 
      main = "graphe de l'attribut Sleep",
      xlab = "numéro de la donnée",
      ylab = "durée de sommeil")
png("Sleep.couleur.png")
plot (sommeil$Sleep, col = "blue", 
      main = "L'attribut Sleep",
      xlab = "Numéro de la donnée",
      ylab = "Durée de sommeil")
dev.off()
plot (sommeil$Sleep, sommeil$Dreaming, col="green", 
        xlab = "Durée de sommeil quotidien", 
        ylab = "Durée de sommeil paradoxal quotidien",
        main = "Durée de sommeil paradoxal vs. durée de sommeil")
png ("dreaming.vs.Sleep.png"
plot (sommeil$Sleep, sommeil$Dreaming, col="green", 
png ("dreaming.vs.Sleep.png")
plot (sommeil$Sleep, sommeil$Dreaming, col="green", 
        xlab = "Durée de sommeil quotidien", 
        ylab = "Durée de sommeil paradoxal quotidien",
        main = "Durée de sommeil paradoxal vs. durée de sommeil")
dev.off()
  plot (sommeil$Sleep, sommeil$Dreaming, pch = ' ',
        xlab = "Durée de sommeil quotidien", 
        ylab = "Durée de sommeil paradoxal quotidien",
        main = "Durée de sommeil paradoxal vs. durée de sommeil")
  text (sommeil$Sleep, sommeil$Dreaming, sommeil$Species)
png ("dreaming.vs.Sleep.espèces.png")
  plot (sommeil$Sleep, sommeil$Dreaming, pch = ' ',
        xlab = "Durée de sommeil quotidien", 
        ylab = "Durée de sommeil paradoxal quotidien",
        main = "Durée de sommeil paradoxal vs. durée de sommeil")
  text (sommeil$Sleep, sommeil$Dreaming, sommeil$Species)
dev.off()
hist (sommeil$Sleep, br = 20)
png ("histo.Sleep.png")
hist (sommeil$Sleep, br = 20)
dev.off()
png ("histo-avec-prop.Sleep.png")
hist (sommeil$Sleep, br = 20, freq = F)
dev.off()
png ("histo-avec-prop-et-densité.Sleep.png")
  hist (sommeil$Sleep, br = 20, freq = F)
  lines (density (na.omit(sommeil$Sleep)), col = "green")
dev.off()
png("camembert.png")
pie (table (cut (sommeil$Sleep, 5)), 
       labels = c ("petit dormeur", "moyen dormeur", 
                   "dormeur", "bon dormeur", "gros dormeur"),
       col = c("white", "light blue", "blue", "purple", "black"))
dev.off()
png("droite-de-régression.png")
  plot (sommeil$Sleep, sommeil$Dreaming)
  abline (lm (sommeil$Dreaming ~ sommeil$Sleep), col = "red")
dev.off()
q("yes")
pie (sommeil$Sleep.exposure)
pie (table (sommeil$Sleep.exposure))
pie (table (sommeil$Sleep.exposure), labels = c("bien protégé", "protégé", "assez protégé", "peu protégé", "non protégé"))
pie (table (sommeil$Sleep.exposure), labels = c("bien protégé", "protégé", "assez protégé", "peu protégé", "non protégé"), col = rainbow (5))
png ("../graphiques/camembert.Sleep.exposure.png")
pie (table (sommeil$Sleep.exposure), labels = c("bien protégé", "protégé", "assez protégé", "peu protégé", "non protégé"), col = rainbow (5))
dev.off()
q("yes")
sommeil [1,]
?princomp
ls()
nv <- sommeil [,2:ncol(sommeil)]
?all
?all
all (!is.na (nv [1, ])
)
?apply
?tapply
?mapply
?sapply
?apply
?apply
apply (nv, 1, function (x) { all (!is.na (x)) })
dim(nv)
apply (nv, 2, function (x) { all (!is.na (x)) })
apply (nv, 3, function (x) { all (!is.na (x)) })
?apply
apply (nv, c(1,2), function (x) { all (!is.na (x)) })
nv.ok <- apply (nv, 1, function (x) { all (!is.na (x)) })
nv.ok.acp <- princomp (nv [nv.ok,])
plot (nv.ok.acp)
biplot (nv.ok.acp)
nv.ok.acp
?princomp
?prcomp
nv.ok.acp.prcomp <- prcomp (nv.ok, scale = T)
nv.ok.acp.prcomp
?prcomp
nv.ok.acp.prcomp <- prcomp (nv.ok, scale. = T)
nv.ok.acp.prcomp
?prcomp
nv.ok.acp.prcomp <- prcomp (nv.ok, scale = T)
nv.ok.acp.prcomp
?prcomp
plot (nv.ok.acp.prcomp)
nv.ok.acp.prcomp <- prcomp (nv [nv.ok,], scale = T)
plot (nv.ok.acp.prcomp)
nv.ok.acp.prcomp
biplot (nv.ok.acp.prcomp)
?prcomp
iris.acp <- prcomp (iris [,1:4], scale = T)
biplot (iris.acp)
?biplot
biplot (iris.acp, col = iris[,5])
?biplot
?biplot.princomp
?biplot
?biplot
iris.acp
?prcomp
iris.acp <- prcomp (iris [,1:4], retx = T, scale = T)
?prcomp
plot (iris.acp$x, col = iris [,5])
nv.ok.acp.prcomp <- prcomp (nv [nv.ok,], retx = T, scale = T)
biplot (nv.ok.acp.prcomp)
?rnorm
spheres.dans.l.espace <- function (n, P)
    {
        K <- length (n)
        centers <- matrix (runif (K * P), nrow = K, ncol = P)
        sdev <- matrix (runif (K * P, max = .1), nrow = K, ncol = P)
        N <- sum (n)
        x <- matrix (0, nrow = N, ncol = P)
        indice <- 0
        for (i in 1:K) {
            for (j in 1:n [i]) {
                x [indice + j, ] <- rnorm (P, mean = centers [i, ], sd = sdev [i, ])
            }
            indice <- indice + n [i]
        }
    }
sc <- spheres.dans.l.espace (c (100, 50, 250), 2)
plot (sc)
edit (spheres.dans.l.espace)
spheres.dans.l.espace <- function (n, P)
    {
        K <- length (n)
        centers <- matrix (runif (K * P), nrow = K, ncol = P)
        sdev <- matrix (runif (K * P, max = .1), nrow = K, ncol = P)
        N <- sum (n)
        x <- matrix (0, nrow = N, ncol = P)
        indice <- 0
        for (i in 1:K) {
            for (j in 1:n [i]) {
                x [indice + j, ] <- rnorm (P, mean = centers [i, ], sd = sdev [i, ])
            }
            indice <- indice + n [i]
        }
        return (x)
    }
sc <- spheres.dans.l.espace (c (100, 50, 250), 2)
plot (sc)
plot (sc, col = c (rep ("blue", times = 100), rep ("red", times = 50), rep ("green", times = 250))
)
sc.10D <- spheres.dans.l.espace (c (100, 50, 250), 10)
plot (sc, col = c (rep ("blue", times = 100), rep ("red", times = 50), rep ("green", times = 250)))
plot (sc.100, col = c (rep ("blue", times = 100), rep ("red", times = 50), rep ("green", times = 250)))
plot (sc.10D, col = c (rep ("blue", times = 100), rep ("red", times = 50), rep ("green", times = 250)))
dim(sc.10D)
sc.100.acp <- prcomp (sc.10D,  retx = T, scale = T)
biplot (sc.100.acp)
sc.10D.acp <- prcomp (sc.10D,  retx = T, scale = T)
rm (sc.100.acp)
biplot (sc.10D.acp)
biplot (sc.10D.acp, col = c (rep ("blue", times = 100), rep ("red", times = 50), rep ("green", times = 250)))
plot (sc.10D.acp, col = c (rep ("blue", times = 100), rep ("red", times = 50), rep ("green", times = 250)))
plot (sc.10D.acp$x, col = c (rep ("blue", times = 100), rep ("red", times = 50), rep ("green", times = 250)))
?kmeans
sommeil.kmeans <- list ()
for (k in 2:10) {
    km <- kmeans (nv [nv.ok,], centers = k, nstart = 30)
    sommeil.kmeans <- c (sommeil.kmeans, km)
}
length(sommeil.kmeans)
sommeil.kmeans <- list ()
for (k in 2:10) {
    km <- kmeans (nv [nv.ok,], centers = k, nstart = 30)
    sommeil.kmeans <- list (sommeil.kmeans, km)
}
length(sommeil.kmeans)
sommeil.kmeans <- list ()
for (k in 2:10) {
    sommeil.kmeans [[k]] <- kmeans (nv [nv.ok,], centers = k, nstart = 30)
}
length(sommeil.kmeans)
sommeil.kmeans[[1]]
sommeil.kmeans[[2]]
sommeil.kmeans[[2]]$withinss
sommeil.kmeans[[8]]$withinss
inertie <- rep (0, times = 10)
for (k in 2:10) {
    inertie [k] <- sum (sommeil.kmenas [[k]]$withinss)
}
for (k in 2:10) {
    inertie [k] <- sum (sommeil.kmeans [[k]]$withinss)
}
plot (inertie[2:10])
sommeil.kmeans[[4]]$clusters
sommeil.kmeans[[4]]$cluster
sommeil [nv.ok,1][which (sommeil.kmeans[[4]]$cluster==1)]
sommeil [nv.ok,1][which (sommeil.kmeans[[4]]$cluster==2)]
sommeil [nv.ok,1][which (sommeil.kmeans[[4]]$cluster==3)]
sommeil [nv.ok,1][which (sommeil.kmeans[[4]]$cluster==4)]
for (i in 1:4)
    print (sommeil [nv.ok,1][which (sommeil.kmeans[[4]]$cluster==i)])
for (i in 1:5)
    print (sommeil [nv.ok,1][which (sommeil.kmeans[[5]]$cluster==i)])
?kmeans
?scale
sommeil.scaled.kmeans <- list ()
inertie.scaled <- rep (0, times = 10)
nv.scaled <- scale (nv [nv.ok,])
for (k in 2:10) {
    sommeil.scaled.kmeans [[k]] <- kmeans (nv.scaled, centers = k, nstart = 30)
    inertie.Scaled [k] <- sum (sommeil.scaled.kmeans [[k]]$withinss)
}
sommeil.scaled.kmeans <- list ()
inertie.scaled <- rep (0, times = 10)
nv.scaled <- scale (nv [nv.ok,])
for (k in 2:10) {
    sommeil.scaled.kmeans [[k]] <- kmeans (nv.scaled, centers = k, nstart = 30)
    inertie.scaled [k] <- sum (sommeil.scaled.kmeans [[k]]$withinss)
}
plot (inertie.scaled)
plot (inertie.scaled[2:10])
for (i in 1:5)
    print (sommeil [nv.ok,1][which (sommeil.scaled.kmeans[[5]]$cluster==i)])
for (i in 1:5)
    print (sommeil [nv.ok,1][which (sommeil.kmeans[[5]]$cluster==i)])
q("yes")
